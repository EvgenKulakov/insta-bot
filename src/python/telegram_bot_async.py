import asyncio
from typing import List, Set
from telebot import telebot, types, async_telebot
from telebot.types import Message, InlineKeyboardMarkup
import configparser
from instaloader_api_async import Loader
from utils import valid_username, files_handler, create_text_menu, get_start_text
from dtos import ProfileResponse
import time
from database_service import Service
from concurrent.futures import ThreadPoolExecutor

properties = configparser.ConfigParser()
properties.read('/home/evgeniy/PycharmProjects/insta-bot/src/resources/application.properties')

# BOT = telebot.TeleBot(properties['TELEGRAM']['BOT'])
ASYNC_BOT = async_telebot.AsyncTeleBot(properties['TELEGRAM']['BOT'])
SERVICE = Service(properties)
# EXECUTOR = ThreadPoolExecutor()
LOADER = Loader(properties, ASYNC_BOT, SERVICE)
SECURITY = {int(properties['TELEGRAM']['ADMIN_ID']),
            int(properties['TELEGRAM']['ANNA_ID']),
            int(properties['TELEGRAM']['DASHA_ID'])}
# BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='‚úÖ INSTALOADER start')


@ASYNC_BOT.message_handler(commands=['start'])
async def read_start(message):
    if message.chat.id in SECURITY:
        text = get_start_text()
        await ASYNC_BOT.send_message(message.chat.id, text=text, parse_mode='HTML')
    else:
        await ASYNC_BOT.send_message(message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(message))


@ASYNC_BOT.message_handler(commands=['menu'])
async def show_menu(message):
    if message.chat.id in SECURITY:
        mode = 'query'
        markup = get_menu_markup(message, mode)

        if markup:
            text = create_text_menu(mode)
            await ASYNC_BOT.send_message(message.chat.id, text=text, reply_markup=markup, parse_mode='HTML')
        else:
            await ASYNC_BOT.send_message(message.chat.id, text='üßê –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Ö–æ—Ç—è –±—ã 1 –∑–∞–ø—Ä–æ—Å')
    else:
        await ASYNC_BOT.send_message(message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(message))


def get_menu_markup(message: Message, mode: str, usernames: List[str] | None = None) -> InlineKeyboardMarkup | None:
    if not usernames:
        usernames = SERVICE.get_profiles(message.chat.id)

    if len(usernames) > 0:
        mode_smiles = {'query': 'üîç ', 'analyzeNew': 'üêù ', 'remove': '‚ùå '}
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º >>", callback_data=f'mode|{mode}'),
        )

        for i in range(0, len(usernames), 2):
            if i + 1 < len(usernames):
                text_data1 = f'{mode}|{usernames[i]}|{int(time.time())}'
                text_data2 = f'{mode}|{usernames[i + 1]}|{int(time.time())}'
                row = [types.InlineKeyboardButton(text=f'{mode_smiles[mode]}{usernames[i]}', callback_data=text_data1),
                       types.InlineKeyboardButton(text=f'{mode_smiles[mode]}{usernames[i + 1]}', callback_data=text_data2)]
                markup.row(*row)
            else:
                text_data = f'{mode}|{usernames[i]}|{int(time.time())}'
                markup.add(types.InlineKeyboardButton(text=f'{mode_smiles[mode]}{usernames[i]}', callback_data=text_data))

        return markup
    else:
        return None


@ASYNC_BOT.callback_query_handler(func=lambda call: call.data.startswith('mode'))
async def change_mode(callback_query):
    if callback_query.message.chat.id in SECURITY:
        mode = callback_query.data.split('|')[1]

        if mode == 'query': mode = 'analyzeNew'
        elif mode == 'analyzeNew': mode = 'remove'
        elif mode == 'remove': mode = 'query'

        markup = get_menu_markup(callback_query.message, mode)

        if markup:
            text = create_text_menu(mode)
            await ASYNC_BOT.edit_message_text(text, callback_query.message.chat.id, callback_query.message.message_id,
                                  parse_mode='HTML', reply_markup=markup)
        else:
            text = 'üßê –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Ö–æ—Ç—è –±—ã 1 –∑–∞–ø—Ä–æ—Å'
            await ASYNC_BOT.edit_message_text(text, callback_query.message.chat.id, callback_query.message.message_id)
    else:
        await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(callback_query.message))


@ASYNC_BOT.message_handler()
async def read_message(message):
    if message.chat.id in SECURITY:
        username = message.text.lower().strip()
        if valid_username(username):
            # if not LOADER.LOCK.is_set():
                # LOADER.LOCK.set()
            if True:
                status_bar = await ASYNC_BOT.send_message(message.chat.id, text='–î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')
                # future = EXECUTOR.submit(lambda: LOADER.search_profile(username, status_bar))
                # response = future.result()
                response = await LOADER.search_profile(username, status_bar)
                await query_handler(response, message)
                # LOADER.LOCK.clear()
            else:
                text = '–Ø —Å–µ–π—á–∞—Å –¥–µ–ª–∞—é –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å, –æ–±–æ–∂–¥–∏ –±—É–∫–≤–∞–ª—å–Ω–æ 30 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑'
                await ASYNC_BOT.send_message(message.chat.id, text=text)
        else:
            await ASYNC_BOT.send_message(message.chat.id, text=f'‚ùå "{message.text}" - –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º')
    else:
        await ASYNC_BOT.send_message(message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(message))


@ASYNC_BOT.callback_query_handler(func=lambda call: call.data.startswith('query'))
async def query(callback_query):
    if callback_query.message.chat.id in SECURITY:
        status_bar = await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')
        username = callback_query.data.split('|')[1]
        response = await LOADER.search_profile(username, status_bar)
        await query_handler(response, callback_query.message)
    else:
        await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(callback_query.message))


async def query_handler(response: ProfileResponse, message: Message):
    if response.type == 'private':
        with open(response.avatar_path, 'rb') as photo:
            await ASYNC_BOT.send_photo(message.chat.id, photo, caption=response.text_message, parse_mode='HTML')
    if response.type == 'no_stories':
        markup = types.InlineKeyboardMarkup()
        text_data = f'query|{response.username}'
        markup.add(types.InlineKeyboardButton(text='üîç –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data=text_data))
        with open(response.avatar_path, 'rb') as photo:
            await ASYNC_BOT.send_photo(message.chat.id, photo, caption=response.text_message,
                           parse_mode='HTML', reply_markup=markup)
    if response.type == 'has_stories':
        markup = types.InlineKeyboardMarkup()
        text_data = f'analyze|{response.username}|{int(time.time())}'
        markup.add(types.InlineKeyboardButton(text='üêù –ü—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å', callback_data=text_data))
        with open(response.avatar_path, 'rb') as photo:
            await ASYNC_BOT.send_photo(message.chat.id, photo, caption=response.text_message,
                           parse_mode='HTML', reply_markup=markup)
    if response.type == 'error':
        await ASYNC_BOT.send_message(message.chat.id, text=response.text_message)


@ASYNC_BOT.callback_query_handler(func=lambda call: call.data.startswith('analyze'))
async def analyze(callback_query):
    if callback_query.message.chat.id in SECURITY:
        callback_type, username, time_create = callback_query.data.split('|')
        status_bar = await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–æ—Ä–∏—Å...')
        response = await LOADER.download_stories(username, status_bar, time_create)
        text_message: str
        if response.type == 'has_stories':
            for story_data in response.story_data_array:
                if story_data.content == 'photo':
                    with open(story_data.path, 'rb') as photo:
                        await ASYNC_BOT.send_photo(callback_query.message.chat.id, photo)
                if story_data.content == 'video':
                    with open(story_data.path, 'rb') as video:
                        await ASYNC_BOT.send_video(callback_query.message.chat.id, video)

            files_handler(response.story_data_array, response.folder_stories)

            if not response.story_data_array:
                if response.count_stories == 1:
                    text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                    f'–£ <b>{response.full_name}</b> —Å–µ–π—á–∞—Å –æ–¥–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–∏—Å.\n'
                                    f'–Ø —Ç–µ–±–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —ç—Ç—É —Å—Ç–æ—Ä–∏—Å - –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–∂–µ')
                else:
                    text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                    f'–£ <b>{response.full_name}</b> {response.count_stories} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.\n'
                                    f'–Ø —Ç–µ–±–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤—Å–µ —ç—Ç–∏ —Å—Ç–æ—Ä–∏—Å - –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–∂–µ')
            elif response.count_viewed > 0:
                text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                f'–£ <b>{response.full_name}</b> {response.count_stories} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.\n'
                                f'–Ø —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–≥–æ {len(response.story_data_array)} —Å—Ç–æ—Ä–∏—Å, '
                                f'—Ç.–∫. –¥—Ä—É–≥–∏–µ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ')
            else:
                text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                f'–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–∏—Å <b>{response.full_name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
            await ASYNC_BOT.send_message(callback_query.message.chat.id, text=text_message, parse_mode='HTML')
        if response.type == 'no_stories':
            text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                            f'–£ <b>{response.full_name}</b> —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ')
            await ASYNC_BOT.send_message(callback_query.message.chat.id, text=text_message, parse_mode='HTML')
        if response.type == 'error_loader':
            text_message = '‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç instagram, –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ ‚Äî —á–µ—Ä–µ–∑ 15-20 –º–∏–Ω—É—Ç.'
            await ASYNC_BOT.send_message(callback_query.message.chat.id, text_message)


        if callback_type == 'analyze':
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn1 = types.InlineKeyboardButton(text='üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data=f'query|{username}')
            btn2 = types.InlineKeyboardButton(text='üêù –ü—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å',
                                              callback_data=f'analyzeNew|{username}|{int(time.time())}')
            markup.add(btn1, btn2)
            await ASYNC_BOT.edit_message_reply_markup(
                chat_id=callback_query.message.chat.id,
                message_id=callback_query.message.message_id,
                reply_markup=markup
            )
    else:
        await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(callback_query.message))


@ASYNC_BOT.callback_query_handler(func=lambda call: call.data.startswith('remove'))
async def remove_history(callback_query):
    if callback_query.message.chat.id in SECURITY:
        telegram_id = callback_query.message.chat.id
        mode, username, time_created = callback_query.data.split('|')
        refresh_usernames = SERVICE.remove_profile(telegram_id, username)
        markup = get_menu_markup(callback_query.message, mode, refresh_usernames)

        if markup:
            text = create_text_menu(mode)
            await ASYNC_BOT.edit_message_text(text, callback_query.message.chat.id, callback_query.message.message_id, reply_markup=markup)
        else:
            text = 'üßê –ó–¥–µ—Å—å –±—É–¥–µ—Ç –º–µ–Ω—é, –∫–æ–≥–¥–∞ —Ç—ã —Å–¥–µ–ª–∞–µ—à—å —Ö–æ—Ç—è –±—ã 1 –∑–∞–ø—Ä–æ—Å'
            await ASYNC_BOT.edit_message_text(text, callback_query.message.chat.id, callback_query.message.message_id)
    else:
        await ASYNC_BOT.send_message(callback_query.message.chat.id, text='–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞')
        await ASYNC_BOT.send_message(properties['TELEGRAM']['ADMIN_ID'], text='–õ–µ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –õ–æ–≥:\n\n' + str(callback_query.message))


asyncio.run(ASYNC_BOT.polling())