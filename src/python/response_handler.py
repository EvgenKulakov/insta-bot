from telebot import TeleBot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from dtos import ProfileResponse, StoryResponseInstaloader
import time
from threading import Event
from utils import delete_stories_handler


class ResponseHandler:
    BOT: TeleBot
    LOCK: Event
    ADMIN_ID: int
    def __init__(self, BOT: TeleBot, LOCK: Event, ADMIN_ID: int):
        self.BOT = BOT
        self.LOCK = LOCK
        self.ADMIN_ID = ADMIN_ID

    def query_handler(self, response: ProfileResponse, message: Message, loader_name: str | None = None):
        if response.type == 'private':
            with open(response.avatar_path, 'rb') as photo:
                self.BOT.send_photo(message.chat.id, photo, caption=response.text_message, parse_mode='HTML')
        if response.type == 'no_stories':
            markup = InlineKeyboardMarkup()
            text_data = f'query|{response.username}'
            markup.add(InlineKeyboardButton(text='üîç –°–¥–µ–ª–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data=text_data))
            with open(response.avatar_path, 'rb') as photo:
                self.BOT.send_photo(message.chat.id, photo, caption=response.text_message,
                               parse_mode='HTML', reply_markup=markup)
        if response.type == 'has_stories':
            markup = InlineKeyboardMarkup()
            text_data = f'analyze|{response.username}|{int(time.time())}'
            markup.add(InlineKeyboardButton(text='üêù –ü—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å', callback_data=text_data))
            with open(response.avatar_path, 'rb') as photo:
                self.BOT.send_photo(message.chat.id, photo, caption=response.text_message,
                               parse_mode='HTML', reply_markup=markup)
        if response.type == 'error':
            self.BOT.send_message(message.chat.id, text=response.text_message)
        if response.type != 'error':
            text_for_admin = f'‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Ñ–∏–ª—è —É {message.chat.first_name} —Å –ø–æ–º–æ—â—å—é –∞–∫–∫–∞—É–Ω—Ç–∞ {loader_name}'
            self.BOT.send_message(self.ADMIN_ID, text=text_for_admin)

        self.LOCK.clear()

    def hornet_handler(self, response: StoryResponseInstaloader, message: Message,
                       loader_name: str | None = None, login_bool: bool | None = None):
        text_message: str
        if response.type == 'has_stories':
            for story_data in response.story_data_array:
                if story_data.content == 'photo':
                    with open(story_data.path, 'rb') as photo:
                        self.BOT.send_photo(message.chat.id, photo)
                if story_data.content == 'video':
                    with open(story_data.path, 'rb') as video:
                        self.BOT.send_video(message.chat.id, video)

            delete_stories_handler(response.story_data_array, response.folder_stories)

            if not response.story_data_array:
                if response.count_stories == 1:
                    text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                    f'–£ <b>{response.full_name}</b> —Å–µ–π—á–∞—Å –æ–¥–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å—Ç–æ—Ä–∏—Å.\n'
                                    f'–Ø —Ç–µ–±–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —ç—Ç—É —Å—Ç–æ—Ä–∏—Å - –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–∂–µ')
                else:
                    text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                    f'–£ <b>{response.full_name}</b> {response.count_stories} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.\n'
                                    f'–Ø —Ç–µ–±–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –≤—Å–µ —ç—Ç–∏ —Å—Ç–æ—Ä–∏—Å - –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç –ø–æ–∑–∂–µ')
            elif response.count_viewed > 0:
                text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                f'–£ <b>{response.full_name}</b> {response.count_stories} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å.\n'
                                f'–Ø —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—Å–µ–≥–æ {len(response.story_data_array)} —Å—Ç–æ—Ä–∏—Å, '
                                f'—Ç.–∫. –¥—Ä—É–≥–∏–µ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω–µ–µ')
            else:
                text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                                f'–í—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–∏—Å <b>{response.full_name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã')
            self.BOT.send_message(message.chat.id, text=text_message, parse_mode='HTML')
        if response.type == 'no_stories':
            text_message = (f'<code>–ò–Ω—Å—Ç–∞—à–µ—Ä—à–µ–Ω—å:</code>\n\n'
                            f'–£ <b>{response.full_name}</b> —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–∏—Å, –ø–æ–ø—Ä–æ–±—É–π –ø—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ')
            self.BOT.send_message(message.chat.id, text=text_message, parse_mode='HTML')
        if response.type == 'error_loader':
            text_message = '‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Instagram, –ø–æ–ø—Ä–æ–±—É–π —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ ‚Äî —á–µ—Ä–µ–∑ 15-20 –º–∏–Ω—É—Ç.'
            self.BOT.send_message(message.chat.id, text_message)

        if response.callback_type == 'analyze':
            markup = InlineKeyboardMarkup(row_width=2)
            btn1 = InlineKeyboardButton(text='üîç –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å', callback_data=f'query|{response.username}')
            btn2 = InlineKeyboardButton(text='üêù –ü—Ä–æ—à–µ—Ä—Å—Ç–∏—Ç—å',
                                              callback_data=f'analyzeNew|{response.username}|{int(time.time())}')
            markup.add(btn1, btn2)
            self.BOT.edit_message_reply_markup(
                chat_id=message.chat.id,
                message_id=message.message_id,
                reply_markup=markup
            )

        if response.type != 'error_loader':
            text_for_admin = (f'‚úÖ –£—Å–ø–µ—à–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç–æ—Ä–∏—Å —É {message.chat.first_name} —Å –ø–æ–º–æ—â—å—é –∞–∫–∫–∞—É–Ω—Ç–∞ {loader_name}, '
                              f'login_bool:{login_bool}')
            self.BOT.send_message(self.ADMIN_ID, text=text_for_admin)

        self.LOCK.clear()